name: Create Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Get version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Validate version consistency
        run: |
          PLUGIN_VERSION=$(cat .claude-plugin/plugin.json | jq -r '.version')
          PACKAGE_VERSION=$(cat package.json | jq -r '.version')
          TAG_VERSION="${{ steps.get_version.outputs.VERSION }}"

          echo "Tag version: $TAG_VERSION"
          echo "Plugin version: $PLUGIN_VERSION"
          echo "Package version: $PACKAGE_VERSION"

          if [ "$PLUGIN_VERSION" != "$TAG_VERSION" ]; then
            echo "Error: plugin.json version ($PLUGIN_VERSION) does not match tag ($TAG_VERSION)"
            exit 1
          fi

          if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
            echo "Error: package.json version ($PACKAGE_VERSION) does not match tag ($TAG_VERSION)"
            exit 1
          fi

      - name: Extract changelog for this version
        id: changelog
        run: |
          VERSION="${{ steps.get_version.outputs.VERSION }}"

          # Try to extract changelog section for this version
          if [ -f "CHANGELOG.md" ]; then
            # Extract content between version headers
            CHANGELOG=$(awk "/## \[$VERSION\]/,/## \[/" CHANGELOG.md | sed '$d' | tail -n +2)

            if [ -z "$CHANGELOG" ]; then
              CHANGELOG="See [CHANGELOG.md](CHANGELOG.md) for details."
            fi
          else
            CHANGELOG="No changelog available."
          fi

          # Save to file to handle multiline content
          echo "$CHANGELOG" > release-notes.txt

      - name: Count commands and agents
        id: counts
        run: |
          COMMAND_COUNT=$(find .claude/commands -name "*.md" -type f | wc -l | tr -d ' ')
          AGENT_COUNT=$(find .claude/agents -name "*.md" -type f | wc -l | tr -d ' ')

          echo "COMMAND_COUNT=$COMMAND_COUNT" >> $GITHUB_OUTPUT
          echo "AGENT_COUNT=$AGENT_COUNT" >> $GITHUB_OUTPUT

          echo "Commands: $COMMAND_COUNT"
          echo "Agents: $AGENT_COUNT"

      - name: Create release archive
        run: |
          # Create a clean archive of the plugin
          mkdir -p release-artifacts

          # Create tar.gz
          tar -czf release-artifacts/larouex-fullstack-plugin-v${{ steps.get_version.outputs.VERSION }}.tar.gz \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='release-artifacts' \
            --exclude='.DS_Store' \
            .

          # Create zip
          zip -r release-artifacts/larouex-fullstack-plugin-v${{ steps.get_version.outputs.VERSION }}.zip \
            . \
            -x '*.git*' \
            -x 'node_modules/*' \
            -x 'release-artifacts/*' \
            -x '.DS_Store'

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.get_version.outputs.TAG }}
          body_path: release-notes.txt
          draft: false
          prerelease: false
          files: |
            release-artifacts/*.tar.gz
            release-artifacts/*.zip
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update latest release badge
        run: |
          echo "Release ${{ steps.get_version.outputs.TAG }} created successfully!"
          echo ""
          echo "ðŸ“¦ Package contains:"
          echo "  - ${{ steps.counts.outputs.COMMAND_COUNT }} commands"
          echo "  - ${{ steps.counts.outputs.AGENT_COUNT }} agents"
          echo ""
          echo "Installation:"
          echo "  claude plugin install https://github.com/LarouexNonprofitConsulting/larouex-fullstack-plugin"

  notify:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: release
    if: success()

    steps:
      - name: Success notification
        run: |
          echo "âœ… Release created successfully!"
          echo "View it at: https://github.com/LarouexNonprofitConsulting/larouex-fullstack-plugin/releases"
